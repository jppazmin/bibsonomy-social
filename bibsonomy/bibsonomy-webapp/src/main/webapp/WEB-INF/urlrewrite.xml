<?xml version="1.0" encoding="utf-8"?>
<!--


     BibSonomy-Webapp - The webapplication for Bibsonomy.

     Copyright (C) 2006 - 2011 Knowledge & Data Engineering Group,
                               University of Kassel, Germany
                               http://www.kde.cs.uni-kassel.de/

     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

-->

<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 3.2//EN"
        "http://tuckey.org/res/dtds/urlrewrite3.2.dtd">

<urlrewrite>

	<!-- TODO: why do we need this rule? -->
	<rule>
		<name>/brokenurl</name>
		<from>/brokenurl.*</from>
		<to last="true">/brokenurl.html</to>
	</rule>

	<!-- just to don't pass resources through all rules ... -->
	<rule>
		<name>/resources/</name>
		<note>to not pass /resources/* through all rules ...</note>
		<from>^(/resources/.+)$</from>
		<to last="true">$1</to>
	</rule>
		
	<!-- store all parameters -->
	<!--
		We need it before the /export rule, otherwise we won't get the 
		parameters on the /export page.
		Note: we add the '?' already here (not when building the URLs), 
		such that it is only added, when the query string is not empty. 
		This is also the reason for the condition: we only set the variable
		when the query string is not empty. (TODO: thus, we're accessing 
		a not existing variable in the JSPs, when there is no query string -
		is this a problem?)  
	 -->
	<rule>
		<name>requQueryAttribute</name>
		<condition type="query-string" operator="equal"></condition>
		<from>^/+(.+)$</from>
		<set name="requQueryString">?%{query-string}</set>
	</rule>
	
	<!-- ############## feeds / export formats ############### -->

	<!-- export format overview page -->
	<rule>
		<name>/export/</name>
		<from>^/+export/+(.*)$</from>
		<set name="requPath">$1</set>
		<to last="true">/export</to>
	</rule>
	<!-- RSS feed for bookmarks, output generated by jsp/export/bookmark/rssfeed.jspx -->
	<rule>
		<name>/rss/</name>
		<from>^/+rss/+(.*)$</from>
		<set type="parameter" name="format">rss</set>
		<to>/$1</to>
	</rule>
	<!-- RSS feed for publications, output generated by jsp/export/bibtex/rssfeed.jspx -->
	<rule>
		<name>/publrss/</name>
		<from>^/+publrss/+(.*)$</from>
		<set type="parameter" name="format">publrss</set>
		<to>/$1</to>
	</rule>
	<!--  special rule for formating NEPOMUK publications -->
	<rule>
		<name>/publrssN/</name>
		<from>^/+publrssN/+(.*)$</from>
		<set type="parameter" name="format">publrssN</set>
		<to>/$1</to>
	</rule>
	<!-- APARSS feed for publications, output generated by jsp/export/bibtex/aparssfeed.jspx -->
	<rule>
		<name>/aparss/</name>
		<from>^/+aparss/+(.*)$</from>
		<set type="parameter" name="format">aparss</set>
		<to>/$1</to>
	</rule>
	<!-- XML output for bookmarks, output generated by jsp/export/bookmark/xmlOutput.jspx -->
	<rule>
		<name>/xml/</name>
		<from>^/+xml/+(.*)$</from>
		<set type="parameter" name="format">xml</set>
		<to>/$1</to>
	</rule>
	<!-- BibTeX output for publications, output generated by jsp/export/bibtex/bibtex.jspx -->
	<rule>
		<name>/bib/</name>
		<from>^/+bib/+(.*)$</from>
		<set type="parameter" name="format">bibtex</set>
		<to>/$1</to>
	</rule>
	<!-- BibTeX output for !!!bookmarks!!!, output generated by jsp/export/bookmark/bibtex.jspx -->
	<rule>
		<name>/bookbib/</name>
		<from>^/+bookbib/+(.*)$</from>
		<set type="parameter" name="format">bookbib</set>
		<to>/$1</to>
	</rule>
	<!-- SWRC output for publications, output generated by jsp/export/bibtex/swrc.jspx -->
	<rule>
		<name>/swrc/</name>
		<from>^/+swrc/+(.*)$</from>
		<set type="parameter" name="format">swrc</set>
		<to>/$1</to>
	</rule>
	<!-- BuRST output generated by BuRSToutput.jsp -->
	<rule>
		<name>/burst/</name>
		<from>^/+burst/+(.*)$</from>
		<set type="parameter" name="format">burst</set>
		<to>/$1</to>
	</rule>
	<!-- EndNote output for publications, output generated by EndnoteOutput.jsp -->
	<rule>
		<name>/endnote/</name>
		<from>^/+endnote/+(.*)$</from>
		<set type="parameter" name="format">endnote</set>
		<to>/$1</to>
	</rule>
	<!-- formated output of publications, output generated by jsp/export/bibtex/htmlOutput.jspx -->
	<rule>
		<name>/publ/</name>
		<from>^/+publ/+(.*)$</from>
		<set type="parameter" name="format">publ</set>
		<to>/$1</to>
	</rule>
	<!-- formated output of bookmarks, output generated by jsp/export/bookmark/bookpubl.jspx-->
	<rule>
		<name>/bookpubl/</name>
		<from>^/+bookpubl/+(.*)$</from>
		<set type="parameter" name="format">bookpubl</set>
		<to>/$1</to>
	</rule>
	<!-- formated JSON output of publications and bookmarks, output generated by jsp/export/json.jspx -->
	<rule>
		<name>/json/</name>
		<from>^/+json/+(.*)$</from>
		<set type="parameter" name="format">json</set>
		<to>/$1</to>
	</rule>
	<!-- CSV output of publications and bookmarks, output generated by CSVView.java -->
	<rule>
		<name>/csv/</name>
		<from>^/+csv/+(.*)$</from>
		<set type="parameter" name="format">csv</set>
		<to>/$1</to>
	</rule>	
	<!-- ****** JabRef Layouts *****  -->
	<rule>
		<name>/layout/</name>
		<from>^/+layout/+(.+?)/+(.*)$</from>
		<set type="parameter" name="format">layout</set>
		<set type="parameter" name="layout">$1</set>
		<to>/$2</to>
	</rule>
	
	<!-- personalized view  -->
	<rule>
		<name>/personalized/</name>
		<from>^/+personalized/+(.*)$</from>
		<set type="parameter" name="personalized">1</set>
		<to>/$1</to>
	</rule>	

	
	<rule>
		<name>/tags/</name>
		<note>
			Handles /tags as modifier and rewrites it as a parameter
		</note>
		<from>^/+tags/+(.+)$</from>
		<set type="parameter" name="tagstype">default</set>
		<to>/$1</to>
	</rule>

	<rule>
		<name>/relatedtags/</name>
		<note>
			Handles /tags as modifier and rewrites it as a parameter
		</note>
		<from>^/+relatedtags/+(.+)$</from>
		<set type="parameter" name="tagstype">related</set>
		<to>/$1</to>
	</rule>

	<!--  store requested path for each query -->
	<!-- 
		WARNING: please never put this after the quick tag editing rules, because there
		we need the complete requested path for nextprev navigation!
		ALSO: never put it earlier, otherwise we get a path with the layout included!
	-->
	<rule>
		<name>requPathAttribute</name>
		<from>^/+(.+)$</from>
		<set name="requPath">$1</set>
	</rule>


	<!-- ############## quick tag editing ############### -->
	<!-- page where user can edit all tags in a batch -->
	<rule>
		<name>/bedit/</name>
		<from>^/+bedit(.*?)/+(.*)$</from>
		<set type="parameter" name="format">batchedit$1</set>
		<to>/$2</to>
	</rule>

	<!-- ensure compatibility to old bookmark / bibtex start / end and tagbox minfreq params -->
	<rule>
		<name>?startBib</name>
		<note>
			Supports the old "startBib=N" parameter also for new pages.
		</note>
		<condition type="parameter" name="startBib">(\d+)</condition>
		<from>^/+(.*)$</from>
		<set type="parameter" name="bibtex.start">%1</set>
		<to>/$1</to>
	</rule>
	<rule>
		<name>?startBook</name>
		<note>
			Supports the old "startBook=N" parameter also for new pages.
		</note>
		<condition type="parameter" name="startBook">(\d+)</condition>
		<from>^/+(.*)$</from>
		<set type="parameter" name="bookmark.start">%1</set>
		<to>/$1</to>
	</rule>
	<rule>
		<name>?items</name>
		<note>
			Supports the "items=N" parameter also for the new pages
			(i.e., both resource types will show N items)
		</note>
		<condition type="parameter" name="items">(\d+)</condition>
		<from>^/+(.*)$</from>
		<set type="parameter" name="bookmark.entriesPerPage">%1</set>
		<set type="parameter" name="bibtex.entriesPerPage">%1</set>
		<to>/$1</to>
	</rule>
	<rule>
		<name>?minfreq</name>
		<note>
			Supports the "minfreq=N" parameter also for new pages.
		</note>
		<condition type="parameter" name="minfreq">(\d+)</condition>
		<from>^/+(.*)$</from>
		<set type="parameter" name="tagcloud.minFreq">%1</set>
		<to>/$1</to>
	</rule>




	<!-- ############## general pages ############### -->

	<!-- homepage -->
	<rule>
		<name>/</name>
		<from>^/+$</from>
		<to last="true">/homepage</to>
	</rule>


	<!-- ############## password reminder ############### -->
	<!-- /reminder/REMINDER_HASH 
	FIXME: this doesn't work when the reminder hash contains a '/'
	-->
	<rule>
		<name>/reminder/REMINDER_HASH</name>
		<from>^/+reminder/(.+)$</from>
		<set type="parameter" name="reminderHash">$1</set>
		<to last="true">/reminder/change_password</to>
	</rule>


	<!-- ############## /concept pages ############### -->
	<!-- /concept/user/USER/TAG -->
	<rule>
		<name>/concept/user/USER/TAG</name>
		<from>^/+concept/+user/+([^/]+?)/(.+)$</from>
		<set type="parameter" name="requestedUser">$1</set>
		<set type="parameter" name="requestedTags">$2</set>
		<to last="true">/concept</to>
	</rule>
	<!-- redirect for tag formular on /concept/user/USER/TAG page -->
	<rule>
		<name>redirect /concept/user/USER/TAG</name>
		<note>redirect /concept/user/USER?tag=TAG to /concept/user/USER/TAG</note>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+concept/+user/+([^/]+)$</from>
		<to type="redirect" last="true">/concept/user/${escape:$1}/${escape:%1}</to>
	</rule>

	<!-- /concept/group/GROUP/TAG -->
	<rule>
		<name>/concept/group/GROUP/TAG</name>
		<from>^/+concept/+group/+([^/]+?)/(.+)$</from>
		<set type="parameter" name="requestedGroup">$1</set>
		<set type="parameter" name="requestedTags">$2</set>
		<to last="true">/concept</to>
	</rule>
	<!-- redirect for tag formular on /concept/group/GROUPNAME/TAG page -->
	<rule>
		<name>redirect /concept/group/GROUP/TAG</name>
		<note>redirect /concept/group/GROUP?tag=TAG to /concept/group/GROUP/TAG</note>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+concept/+group/+([^/?]+)$</from>
		<to type="redirect" last="true">/concept/group/${escape:$1}/${escape:%1}</to>
	</rule>

	<!-- /concept/tag/TAG -->
	<rule>
		<name>/concept/tag/TAG</name>
		<from>^/+concept/+tag/([^/]+)$</from>
		<set type="parameter" name="requestedTags">$1</set>
		<to last="true">/concept</to>
	</rule>
	<!-- redirect for tag formular on /concept/tag/TAG page -->
	<rule>
		<name>redirect /concept/tag/TAG</name>
		<note>redirect /concept/tag?tag=TAG to /concept/tag/TAG</note>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+concept/+tag/*$</from>
		<to type="redirect" last="true">/concept/tag/${escape:%1}</to>
	</rule>


	<!-- ############## /user pages ############### -->
	<!-- redirect for tag formular on /user/USER/TAG page -->
	<rule>
		<name>redirect /user/USER/TAG</name>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+user/+([^/]+)$</from>
		<to type="redirect" last="true">/user/${escape:$1}/${escape:%1}</to>
	</rule>
	<!-- redirect for user formular on /user/USER page -->
	<rule>
		<name>redirect /user/USER</name>
		<condition type="parameter" name="user">(.+)</condition>
		<from>^/+user/$</from>
		<to type="redirect" last="true">/user/${escape:%1}</to>
	</rule>

	<!-- /user/USER/TAG -->
	<rule>
		<name>/user/USER/TAG</name>
		<from>^/+user/+([^/]+?)/(.+)$</from>
		<set type="parameter" name="requestedUser">$1</set>
		<set type="parameter" name="requestedTags">$2</set>		
		<to last="true">/user</to>
	</rule>
	<!-- /user/USER -->
	<rule>
		<name>/user/USER</name>
		<from>^/+user/+([^/]+)$</from>
		<set type="parameter" name="requestedUser">$1</set>
		<to last="true">/user</to>
	</rule>

	<!-- /user/USER/ (note the trailing slash) -->
	<rule>
		<name>/user/USER/</name>
		<from>^/+user/+([^/]+)/$</from>
		<to type="redirect" last="true">/user/${escape:$1}</to>
	</rule>

	
	<!-- redirect for FOAF Output of user profile on /foaf/user/USER page -->
	<rule>
		<name>redirect /foaf/user/USER</name>
		<condition type="parameter" name="user">(.+)</condition>
		<from>^/+foaf/+user/$</from>
		<to type="redirect" last="true">/foaf/user/${escape:%1}</to>
	</rule>
	<rule>
		<name>/foaf/user/USER</name>
		<from>^/+foaf/+user/+([^/]+?)$</from>
		<set type="parameter" name="requestedUser">$1</set>
		<to last="true">/foaf</to>
	</rule>
	
	<!-- ############## Curriculum vitae pages ############### -->
	
	<!-- /cv/user/USER -->
	<rule>
		<name>/cv/user/USER</name>
		<from>^/+cv/+user/(.+)$</from>
		<set type="parameter" name="requestedUser">$1</set>
		<to last="true">/cvpage</to>
	</rule>
	
	<!-- /picture/user/USER -->
	<rule>
		<name>/picture/user/USER</name>
		<from>^/+picture/+user/(.+)$</from>
		<set type="parameter" name="requestedUser">$1</set>
		<to last="true">/picture</to>
	</rule>
	
		<!-- /cv/group/GROUPNAME -->
	<rule>
		<name>/cv/group/USER</name>
		<from>^/+cv/+group/(.+)$</from>
		<set type="parameter" name="requestedGroup">$1</set>
		<to last="true">/groupcvpage</to>
	</rule>
	
	<!-- /bibtexkey/KEY/USER -->
	<rule>
		<name>/bibtexkey/user</name>
		<note>basically the same as /bibtexkey/key+sys:user:USERNAME, but kept for compatibility reasons</note>
		<from>^/+bibtexkey/+(.+)/([^ ]*?)$</from>
		<set type="parameter" name="requestedKey">$1</set>
		<set type="parameter" name="requestedUser">$2</set>
		<to last="true">/bibtexkey</to>
	</rule>	
	<!-- /bibtexkey/KEY (+ eventual system tags) -->
	<rule>
		<name>/bibtexkey</name>
		<note>bibtexkeys may not contain spaces; systemtags may be appended (e.g. /bibtexkey/key+sys:user:dbenz)</note>
		<from>^/+bibtexkey/+([^ ]+) ?(.*)$</from>
		<set type="parameter" name="requestedKey">$1</set>
		<set type="parameter" name="requestedTags">$2</set>
		<to last="true">/bibtexkey</to>
	</rule>
	
	<!-- download a document -->
	<rule>
		<name>/documents/INTRAHASH/USERNAME/FILENAME</name>
		<from>^/+documents/+([0-9a-fA-F]+)/+([^/]+)/+([^/]+)</from>
		<set type="parameter" name="intrahash">$1</set>
		<set type="parameter" name="requestedUser">$2</set>
		<set type="parameter" name="filename">$3</set>
		<to last="true">/downloadFile</to>
	</rule>
	
	<!-- delete document -->
	<!--<rule>
		<name>/documents/FILEHASH/INTRAHASH</name>
		<from>^/+documents/+([0-9a-fA-F]+)/+([0-9a-fA-F]+)</from>
		<set type="parameter" name="fileHash">$1</set>
		<set type="parameter" name="intraHash">$2</set>
		<to last="true">/documents</to>
	</rule>-->

	<!-- ############## viewable pages ############### -->
	<!-- /viewable/GROUP/TAG -->
	<rule>
		<name>/viewable/GROUP/TAG</name>
		<from>^/+viewable/+([^/]+?)/(.+)$</from>
		<set type="parameter" name="requestedGroup">$1</set>
		<set type="parameter" name="requestedTags">$2</set>
		<to last="true">/viewable</to>
	</rule>
	<!-- redirect for tag formular on /viewable/GROUP/TAG page -->
	<rule>
		<name>redirect /viewable/GROUP/TAG</name>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+viewable/+([^/]+)$</from>
		<to type="redirect" last="true">/viewable/${escape:$1}/${escape:%1}</to>
	</rule>

	<!-- /viewable/GROUP -->
	<rule>
		<name>/viewable/GROUP</name>
		<from>^/+viewable/+([^/]+)$</from>
		<set type="parameter" name="requestedGroup">$1</set>
		<to last="true">/viewable</to>
	</rule>
	<!-- redirect from /viewable/GROUP/ to /viewable/GROUP -->
	<rule>
		<name>redirect /viewable/GROUP</name>
		<from>^/+viewable/+([^/]+)/$</from>
		<to type="redirect" last="true">/viewable/${escape:$1}</to>
	</rule>

	<!-- ############## group pages ############### -->
	<!-- /group/GROUP/TAG -->
	<rule>
		<name>/group/GROUP/TAG</name>
		<from>^/+group/+([^/]+?)/(.+)$</from>
		<set type="parameter" name="requestedGroup">$1</set>
		<set type="parameter" name="requestedTags">$2</set>
		<to last="true">/group</to>
	</rule>
	<!-- redirect for tag formular on /group/GROUP/TAG page -->
	<rule>
		<name>redirect /group/GROUP/TAG</name>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+group/+([^/]+)$</from>
		<to type="redirect" last="true">/group/${escape:$1}/${escape:%1}</to>
	</rule>

	<!-- /group/GROUP -->
	<rule>
		<name>/group/GROUP</name>
		<from>^/+group/+([^/]+)$</from>
		<set type="parameter" name="requestedGroup">$1</set>
		<to last="true">/group</to>
	</rule>

	<!-- /groups -->
	<rule>
		<name>redirect /group/GROUP</name>
		<condition type="parameter" name="group">(.+)</condition>
		<from>^/+group/</from>
		<to type="redirect" last="true">/group/${escape:%1}</to>
	</rule>
	<rule>
		<name>redirect /groups</name>
		<from>^/+group/*$</from>
		<to type="redirect" last="true">/groups</to>
	</rule>
	<rule>
		<name>redirect group/GROUP/</name>
		<from>^/+group/+([^/]+)/$</from>
		<to type="redirect" last="true">/group/${escape:$1}</to>
	</rule>

	<!-- redirect for tag formular on /relevantfor/group/GROUP/TAG page -->
	<rule>
		<name>redirect /relevantfor/group/GROUP/TAG</name>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+relevantfor/+group/+([^/]+)$</from>
		<to type="redirect" last="true">/relevantfor/group/${escape:$1}/${escape:%1}</to>
	</rule>
	<!-- /relevantfor/group/GROUP -->
	<rule>
		<name>/relevantfor/group/GROUP</name>
		<!-- REDIRECT TO GROUPPAGE AND BUILD A SYSTEMTAG -->
		<from>^/+relevantfor/+group/+([^/]+)$</from>
		<set type="parameter" name="requestedGroup">$1</set>
		<set type="parameter" name="requestedTags">sys:relevantFor:$1</set>
		<to last="true">/group</to>
	</rule>

	<!-- /relevantfor/group/GROUP/TAG -->
	<rule>
		<name>/relevantfor/group/GROUP/TAG</name>
		<!-- REDIRECT TO GROUPPAGE AND BUILD A SYSTEMTAG -->
		<from>^/+relevantfor/+group/+([^/]+)/(.+)$</from>
		<set type="parameter" name="requestedGroup">$1</set>
		<set type="parameter" name="requestedTags">sys:relevantFor:$1 $2</set>
		<to last="true">/group</to>
	</rule>

	<!-- ############## friend pages ############### -->
	<rule><!-- redirect to friends page if user types /friend incidentally -->
		<name>redirect /friend</name>
		<from>^/+friend/*$</from>
		<to  type="redirect" last="true">/friends</to>
	</rule>
	<rule><!-- /friend/USER/TAG -->
		<name>/friend/user/TAG</name>
		<from>^/+friend/+([^/]+?)/(.+)$</from>
		<set type="parameter" name="requestedUser">$1</set>
		<set type="parameter" name="requestedTags">$2</set>
		<to last="true">/friend</to>
	</rule>
	<!-- redirect for tag formular on /friend/USER/TAG page -->
	<rule>
		<name>redirect /friend/user/TAG</name>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+friend/+([^/]+)$</from>
		<to type="redirect" last="true">/friend/${escape:$1}/${escape:%1}</to>
	</rule>
	<rule><!-- /friend/USER -->
		<name>/friend/USER</name>
		<from>^/+friend/+([^/]+)$</from>
		<set type="parameter" name="requestedUser">$1</set>
		<to last="true">/friend</to>
	</rule>
	<!-- /friends -->
	<rule>
		<name>redirect /friend/USER</name>
		<condition type="parameter" name="user">(.+)</condition>
		<from>^/+friends/*</from>
		<to type="redirect" last="true">/friend/${escape:%1}</to>
	</rule>
	<rule>
		<name>/friends/</name>
		<from>^/+friends/*$</from>
		<to last="true">/friends</to>
	</rule>
	<rule>
		<name>redirect /friends/USER</name>
		<from>^/+friend/+([^/]+)/$</from>
		<to type="redirect" last="true">/friend/${escape:$1}</to>
	</rule>

	<!-- ############## tag pages ############### -->
	<!-- redirect for tag formular on /tag page -->
	<rule>
		<name>redirect /tag/TAG</name>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+tag/*$</from>
		<to type="redirect" last="true">/tag/${escape:%1}</to>
	</rule>
	<!-- tags -->
	<rule>
		<name>/tags</name>
		<from>^/+tags/*$</from>
		<to last="true">/tags</to>
	</rule>
	<rule>
		<name>redirect /tags</name>
		<from>^/+tag/*$</from>
		<to type="redirect" last="true">/tags</to>
	</rule>
	<!-- /tag/TAG -->
	<rule>
		<name>/tag/TAG</name>
		<from>^/+tag/(.+)$</from>
		<set type="parameter" name="requestedTags">$1</set>
		<to last="true">/tag</to>
	</rule>

	<!-- ############## author pages ############### -->
	<!-- /author/AUTHOR/TAG -->
	<rule>
		<name>/author/AUTHOR/TAG</name>
		<from>^/+author/+([^/]+?)/(.+)$</from>
		<set type="parameter" name="requestedAuthor">$1</set>
		<set type="parameter" name="requestedTags">$2</set>
		<to last="true">/author</to>
	</rule>
	<!-- redirect for tag formular on /author/AUTHOR/TAG page -->
	<rule>
		<name>redirect /author/AUTHOR/TAG</name>
		<note>redirect /author/AUTHOR?tag=TAG to /author/AUTHOR/TAG</note>
		<condition type="parameter" name="tag">(.+)</condition>
		<from>^/+author/+([^/]+)$</from>
		<to type="redirect" last="true">/author/${escape:$1}/${escape:%1}</to>
	</rule>
	<!-- /author/AUTHOR -->
	<rule>
		<name>/author/AUTHOR</name>
		<from>^/+author/([^/]+)$</from>
		<set type="parameter" name="requestedAuthor">$1</set>
		<to last="true">/author</to>
	</rule>
	<!-- redirect for author formular on /author/AUTHOR page -->
	<rule>
		<name>redirect /author/AUTHOR</name>
		<note>redirect /author?author=AUTHOR to /author/AUTHOR</note>
		<condition type="parameter" name="author">(.+)</condition>
		<from>^/+author/*$</from>
		<to type="redirect" last="true">/author/${escape:%1}</to>
	</rule>

	<!-- ############## url hashes ############### -->
	<!-- on empty URL, redirect to start page -->
	<rule>
		<name>redirect /url</name>
		<from>^/+url/*$</from>
		<to type="redirect" last="true">/</to>
	</rule>
	<rule>
		<name>/url/HASH</name>
		<from>^/+url/+([0-9a-fA-F]+)$</from>
		<set type="parameter" name="requUrlHash">$1</set>
		<to last="true">/url</to>
	</rule>
	<rule>
		<name>/url/HASH/USER</name>
		<from>^/+url/+([0-9a-fA-F]+)/+(.+)$</from>
		<set type="parameter" name="requUrlHash">$1</set>
		<set type="parameter" name="requestedUser">$2</set>
		<to last="true">/url</to>
	</rule>


	<!-- ############## publ hashes ############### -->
	
	<!-- NEW PAGES -->
	<rule><!-- /[32]/USERNAME -->
		<name>/bibtex/HASH/USER</name>
		<from>^/+bibtex/+([0-9a-fA-F]{32})/+(.+)$</from>
		<set type="parameter" name="requBibtex">1$1</set>
		<set type="parameter" name="requestedUser">$2</set>
		<to last="true">/bibtex</to>
	</rule>
	<rule><!-- /[0-3][32]/USERNAME -->
		<name>/bibtex/SHASH/USER</name>
		<from>^/+bibtex/+([0-3])([0-9a-fA-F]{32})/+(.+)$</from>
		<set type="parameter" name="requBibtex">$1$2</set>
		<set type="parameter" name="requestedUser">$3</set>
		<to last="true">/bibtex</to>
	</rule>	
	
	<rule><!-- /[0-3][32] -->
		<name>/bibtex/SHASH</name>
		<from>^/+bibtex/+([0-3])([0-9a-fA-F]{32})$</from>
		<set type="parameter" name="requBibtex">$1$2</set>
		<to last="true">/bibtex</to>
	</rule>
	<rule><!-- /[32] (arbitrary hash) defaults to simhash1 -->
		<name>/bibtex/HASH</name>
		<from>^/+bibtex/+([0-9a-fA-F]{32})$</from>
		<set type="parameter" name="requBibtex">1$1</set>
		<to last="true">/bibtex</to>
	</rule>

	<!-- ############## search pages ############### -->
	<rule>
		<name>/search/SEARCH</name>
		<from>^/+search/(.+)$</from>
		<set type="parameter" name="requestedSearch">$1</set>
		<to last="true">/search</to>
	</rule>
	<!-- redirect for search formular on /search/SEARCHTERM page -->
	<rule>
		<name>redirect /search/SEARCH</name>
		<condition type="parameter" name="search">(.+)</condition>
		<from>^/+search$</from>
		<to type="redirect" last="true">/search/${escape:%1}</to>
	</rule>


	<!-- ############## /relations ############### -->
	<rule>
		<name>/relations/USER</name>
		<from>^/+relations/+(.+)$</from>
		<set type="parameter" name="requestedUser">$1</set>
		<to last="true">/relations</to>
	</rule>
	<rule>
		<name>/relations</name>
		<from>^/+relations/*$</from>
		<to last="true">/allRelations</to>
	</rule>


	<!-- ############## /my* mappings ############### -->
	<!-- 
		currently we handle the following mappings:
		/myBibSonomy
		/myBibTeX
		/myRelations
		/myPDF
		/myDuplicates
	-->
	
	<!-- we need this rule, since without it, mySearch is catched by the next rule -->
	<rule>
		<name>/mySearch/GROUP</name>
		<from>^/mySearch/+([^/]+)$</from>
		<set type="parameter" name="requGroup">$1</set>
		<to last="true">/mySearch</to>
	</rule>
	<rule>
		<name>mySearch</name>
		<from>^/mySearch</from>
		<to last="true">/mySearch</to>
	</rule>
	<!-- FIXME: it is very optimistic, to send ALL URLs starting with /my to there ... -->
	<rule>
		<name>/my*</name>
		<from>^/(my.+)$</from>
		<set type="parameter" name="myPage">$1</set>
		<to last="true">/redirect</to>
	</rule>
	<!-- ############## content negotiation ############### -->
	<rule>
		<name>/uri/</name>
		<from>^/+uri/+(.+)$</from>
		<set type="parameter" name="url">$1</set>
		<to last="true">/redirect</to>
	</rule>


	<!-- ############## actions ############### -->
	<rule>
		<name>/import/delicious</name>
		<from>^/import/delicious$</from>
		<set type="parameter" name="importType">delicious</set>
		<to last="true">/import/bookmarks</to>
	</rule>
	<rule>
		<name>/import/delicious/v2</name>
		<from>^/import/delicious/v2$</from>
		<set type="parameter" name="importType">delicious.yahoo</set>
		<to last="true">/import/bookmarks</to>
	</rule>
	<rule>
		<name>/import/firefox</name>
		<from>^/import/firefox</from>
		<set type="parameter" name="importType">firefox</set>
		<to last="true">/import/bookmarks</to>
	</rule>
	

	<!-- /activate/ACTIVATIONCODE -->
	<rule>
		<name>/activate/ACTIVATIONCODE</name>
		<from>^/+activate/([^/]+)$</from>
		<set type="parameter" name="activationCode">$1</set>
		<to last="true">/activate</to>
	</rule>


	<!-- ############## new actions - testing! ############### -->
	<rule><!-- /actions/admin/group/GROUPNAME -->
		<name>/actions/admin/group/GROUP</name>
		<from>^/+actions/+admin/+group/+([^/]+)$</from>
		<set type="parameter" name="requestedGroup">$1</set>
		<to last="true">/actions/admin/group</to>
	</rule>


	<!-- ############## old pages - can be removed when never accessed ############### -->
	<rule><!-- /faq to /help/faq -->
		<name>/faq</name>
		<from>^/faq(.*)$</from>
		<to type="permanent-redirect" last="true">/help/faq$1</to>
	</rule>

	<!-- old editBookmark/Publication forms - used by the buttons! -->
	<rule>
		<name>/ShowBookmarkEntry</name>
		<from>^/ShowBookmarkEntry$</from>
		<to last="true">/editBookmark</to>
	</rule>
	<rule>
		<name>/BibtexHandler</name>
		<condition type="method">GET</condition>
		<from>^/BibtexHandler$</from>
		<to last="true">/editPublication</to>
	</rule>
	


</urlrewrite>
