<?xml version="1.0" encoding="UTF-8" ?>
<!--


     BibSonomy-Lucene - A blue social bookmark and publication sharing system.

     Copyright (C) 2006 - 2011 Knowledge & Data Engineering Group,
                               University of Kassel, Germany
                               http://www.kde.cs.uni-kassel.de/

     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU Lesser General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

-->

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
 "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="Lucene">
	
	<!-- get given group's members -->
	<select id="getGroupMembersByGroupName" resultClass="string" parameterClass="string">
		SELECT g.user_name 
		FROM groups g 
		JOIN groupids gn USING (`group`)
		WHERE gn.group_name = #groupName#
	</select>
	
	<!-- get all friends of the given user -->
	<select id="getFriendsForUser" resultClass="string" parameterClass="string">
		SELECT user_name
		FROM friends
		WHERE f_user_name = #userName#
	</select>

	<!-- get date of most recent tas entry  -->
	<select id="getNewestRecordDateFromTas" resultClass="date">
		SELECT MAX(change_date) as date
		FROM tas 
	</select>

	<!-- get list of all publications for given user -->
	<select id="getBibTexForUser" resultMap="BibTexCommon.luceneLogBibtexPost" parameterClass="bibtexParam">
		SELECT <include refid ="bibtexAttributes2"/>, t.tag_name, g.*, b2.count, t.tas_id, b2.change_date AS log_date
		FROM (SELECT t1.*, h.ctr AS count
		      FROM bibtex t1, bibhash h
		      WHERE <include refid="bibtexSimHash3"/>
		            AND t1.user_name = #requestedUserName#
		            AND t1.group &gt;= 0
		            <!-- <include refid="restrictToGroups"/> -->
		        	<dynamic prepend="AND">
						<isNotNull property="entryType">		
							entrytype = #entryType#
						</isNotNull>
		     		</dynamic>
		      ORDER BY date DESC
		      LIMIT #limit# OFFSET #offset#) AS b2
		LEFT OUTER JOIN tas AS t ON b2.content_id = t.content_id, groupids AS g
		WHERE b2.group = g.group
		ORDER BY b2.date DESC, b2.content_id DESC, t.tas_id DESC
	</select>
	
	<!-- get list of all bookmarks for given user -->
	<select id="getBookmarkForUser" resultMap="BookmarkCommon.luceneLogBookmarkPost" parameterClass="bookmarkParam">
		SELECT g.*, bb.content_id, bb.book_url_hash AS interHash, bb.book_url_hash AS intraHash, title, description, bb.date,
		       bb.book_url, bb.book_url_ctr AS count, t.tag_name, bb.user_name, t.tas_id, bb.change_date AS log_date
		FROM (SELECT t1.content_id, t1.book_url_hash, t1.book_description AS title, t1.book_extended AS description, t1.date,
		             u.book_url, u.book_url_ctr, t1.group, t1.user_name, t1.change_date
		      FROM bookmark t1, urls u
		      WHERE u.book_url_hash = t1.book_url_hash
		            AND t1.user_name = #requestedUserName#
		            <!-- <include refid="restrictToGroups"/> -->
		            AND t1.group &gt;= 0
		      ORDER BY date DESC
		      LIMIT #limit# OFFSET #offset#) AS bb
		LEFT OUTER JOIN tas AS t ON bb.content_id = t.content_id, groupids AS g
		WHERE bb.group = g.group
		ORDER BY bb.date DESC, bb.content_id DESC, t.tas_id DESC
	</select>

	<!--  get list of content ids which will should be deleted from index -->
	<select id="getBibTexContentIdsToDelete"  resultClass="integer" parameterClass="date">
		SELECT content_id
		FROM log_bibtex 
		WHERE log_date &gt; #date# 
	</select>
	
	<select id="getBookmarkContentIdsToDelete"  resultClass="integer" parameterClass="date">
		SELECT content_id
		FROM log_bookmark 
		WHERE log_date &gt; #date# 
	</select>
	
	<select id="getGoldStandardPublicationContentIdsToDelete" resultClass="integer" parameterClass="date">
		SELECT content_id FROM
		log_gold_standard_publications WHERE log_date &gt; #date# 
	</select>
	
	<!--+ 
		| get list of publication posts within a given time range
		| Parameter: 
		|    lastTasId 
		+-->
	<select id="getBibTexPostsForTimeRange" parameterClass="bibtexParam" resultMap="BibTexCommon.luceneBibtexPost">
		SELECT <include refid ="luceneBibtexAttributes2"/>, t.tag_name, g.*, h.ctr AS count
		FROM tas t
	      JOIN bibtex b2 USING (content_id)
	      JOIN bibhash h ON (<include refid="bibtexSimHash4"/>)
	      JOIN groupids g ON (b2.group = g.group)
		WHERE t.tas_id &gt; #lastTasId#
		  AND b2.group &gt;= 0
		ORDER BY b2.date DESC, b2.content_id DESC, t.tas_id DESC
	</select>
	
	<!--+ 
		| get list of bookmark posts within a given time range
		| Parameter: 
		|    lastTasId 
		+-->
	<select id="getBookmarkPostsForTimeRange" resultMap="BookmarkCommon.luceneBookmarkPost" parameterClass="bookmarkParam">
	    SELECT <include refid ="luceneBookmarkAttributes"/>
	    FROM tas t
	      JOIN bookmark b USING (content_id)
	      JOIN urls u USING (book_url_hash)
	      JOIN groupids g ON (b.group = g.group)
	    WHERE t.tas_id &gt; #lastTasId#
	      AND b.group &gt;= 0
	    ORDER BY b.date DESC, b.content_id DESC, t.tas_id DESC
	</select>
	
	<select id="getGoldStandardPublicationPostsForTimeRange" resultMap="GoldStandardPublicationCommon.luceneGoldStandardPublicationPost">
		SELECT
		<include refid="allGoldStandardPublicationAttributesWithSimHashes" />,
		b.group, 'public' AS group_name, 1 AS count FROM
		gold_standard_publications b WHERE b.content_id &gt; #lastTasId# ORDER
		BY b.date DESC, b.content_id DESC
	</select>
	
</sqlMap>
