<?xml version="1.0" encoding="UTF-8"?>
<!--


     BibSonomy-Database - Database for BibSonomy.

     Copyright (C) 2006 - 2011 Knowledge & Data Engineering Group,
                               University of Kassel, Germany
                               http://www.kde.cs.uni-kassel.de/

     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU Lesser General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

-->

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="TagRelation">
	<insert id="insertTagRelationIfNotPresent" parameterClass="tagRelationParam">
		INSERT IGNORE INTO tagtagrelations (relationID, lower, upper, date_of_create,
			user_name, lower_lcase, upper_lcase)
		SELECT value+1, #lowerTagName#, #upperTagName#, #creationDate#, 
			#ownerUserName#, LCASE(#lowerTagName#), LCASE(#upperTagName#)
		FROM ids 
		WHERE name = 2
	</insert>

	<delete id="deleteTagRelation" parameterClass="tagRelationParam">
		DELETE FROM tagtagrelations
		WHERE user_name=#ownerUserName# 
			AND lower=#lowerTagName#
			AND upper=#upperTagName#
	</delete>

	<delete id="deleteConcept" parameterClass="tagRelationParam">
		DELETE FROM tagtagrelations 
		WHERE user_name=#ownerUserName#
			AND upper=#upperTagName#
	</delete>
	
	<!-- 
		TODO: why should we delete those concepts? Which feature needs this query?
	-->	
	<delete id="deleteEqualConcepts" parameterClass="loggingParam">
		DELETE FROM tagtagrelations 
		  WHERE lower = #newId# AND upper = #newId# AND user_name = #user.name#
	</delete>
	
	<!--	
		Needed because if the user changes one relation to another that does exist 
		the replacement is skipped 
		TODO: This query potentially deletes whole concepts! This should not be 
		necessary. Please remove.	
		-->
	<delete id="deleteOldConcepts" parameterClass="loggingParam">
		DELETE FROM tagtagrelations 
		  WHERE (lower = #oldId# OR upper = #oldId#) AND user_name = #user.name#
	</delete>

	<!-- the resultMap needs the column subTagCount whose value is always 1, since a 
		user cannot	have the same relation twice -->
	<select id="getPickedConceptsForUser" parameterClass="String"
		resultMap="TagCommon.tagWithSubtags">
		SELECT upper AS tag_name, lower AS subTag, '1' AS subTagCount
		  FROM tagtagrelations
		  WHERE user_name=#userName#
			AND picked=true
		  ORDER BY LCASE(tag_name) ASC, LCASE(subTag) ASC
	</select>

	<!-- the resultMap needs the column subTagCount whose value is always 1, since a 
		user cannot	have the same relation twice -->
	<select id="getAllConceptsForUser" parameterClass="tagRelationParam"
		resultMap="TagCommon.tagWithSubtags">
		SELECT t.upper AS tag_name, t.lower AS subTag, '1' AS subTagCount
		  FROM tagtagrelations t,
		    (SELECT DISTINCT upper AS tag_name, user_name
			  FROM tagtagrelations
			  WHERE user_name=#requestedUserName#
			  LIMIT #limit#
			  OFFSET #offset#
			  ) AS r
		  WHERE t.user_name=r.user_name
		    AND t.upper=r.tag_name
		  ORDER BY LCASE(tag_name) ASC, LCASE(subTag) ASC;
	</select>

	<!-- the resultMap needs the column subTagCount whose value is always 1, since a 
		user cannot	have the same relation twice -->
	<select id="getConceptForUser" parameterClass="tagRelationParam"
		resultMap="TagCommon.tagWithSubtags">
		SELECT upper_lcase AS tag_name, lower_lcase AS subTag, '1' as subTagCount
		  FROM tagtagrelations
		  WHERE user_name=#ownerUserName#
			AND upper_lcase=LCASE(#upperTagName#)
		  GROUP BY upper_lcase, lower_lcase
		  ORDER BY LCASE(subTag)
	</select>

	
	<select id="getAllConcepts" resultMap="TagCommon.tagWithSubtagsAndUserCount">
		SELECT tagCount.upper AS tag_name, r.lower_lcase AS subTag, 
			   tagCount.usercount AS user_count, COUNT(r.lower_lcase) AS subTagCount
		  FROM tagtagrelations r JOIN user u USING (user_name), 
			(SELECT upper_lcase AS upper, COUNT(DISTINCT user_name) AS usercount, 
			     COUNT(upper_lcase COLLATE utf8_unicode_ci) AS count
			   FROM tagtagrelations JOIN user u USING (user_name)
			   WHERE u.spammer = 0
			   GROUP BY upper_lcase COLLATE utf8_unicode_ci 
			   ORDER BY usercount DESC, count DESC LIMIT 50
		    ) AS tagCount
		  WHERE tagCount.upper=r.upper_lcase
			AND u.spammer = 0
		  GROUP BY tagCount.upper, r.lower_lcase
	</select>

	<select id="getGlobalConceptByName" parameterClass="String"
		resultMap="TagCommon.tagWithSubtags">
		SELECT upper_lcase AS tag_name,	lower_lcase AS subTag,
			COUNT(DISTINCT user_name) AS subTagCount
		  FROM tagtagrelations JOIN user u USING (user_name)
		  WHERE upper_lcase = #conceptName#
			AND u.spammer = 0
		  GROUP BY upper_lcase,	lower_lcase
		  ORDER by LCASE(subTag)
	</select>

	<select id="getRelationID" parameterClass="tagRelationParam"
		resultClass="string">
		SELECT relationID 
		  FROM tagtagrelations 
		  WHERE user_name = #ownerUserName# 
			AND lower = #lowerTagName#
			AND upper = #upperTagName# 
	</select>
	
	<update id="updateUpperTagRelations" parameterClass="loggingParam">
		UPDATE IGNORE tagtagrelations t 
		  SET t.upper = #newId#, t.upper_lcase = LCASE(#newId#)
		  WHERE t.upper = #oldId# AND t.user_name = #user.name#
	</update>
	
	<update id="updateLowerTagRelations" parameterClass="loggingParam">
		UPDATE IGNORE tagtagrelations t 
		  SET t.lower = #newId#, t.lower_lcase = LCASE(#newId#)
		  WHERE t.lower = #oldId# AND t.user_name = #user.name#
	</update>
	
	<update id="pickConcept" parameterClass="tagRelationParam">
		UPDATE tagtagrelations 
		  SET picked = true
		  WHERE user_name = #ownerUserName# 
			AND upper = #upperTagName#
	</update>
	
	<update id="unpickConcept" parameterClass="tagRelationParam">
		UPDATE tagtagrelations 
		  SET picked = false
		  WHERE user_name = #ownerUserName# 
			AND upper = #upperTagName#
	</update>
	
	<update id="pickAllConcepts" parameterClass="String">
		UPDATE tagtagrelations 
		  SET picked = true
		  WHERE user_name = #ownerUserName#
	</update>
	
	<update id="unpickAllConcepts" parameterClass="String">
		UPDATE tagtagrelations 
		  SET picked = false
		  WHERE user_name = #ownerUserName#
	</update>
</sqlMap>