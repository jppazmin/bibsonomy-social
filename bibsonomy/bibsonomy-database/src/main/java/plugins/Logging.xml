<?xml version="1.0" encoding="UTF-8"?>
<!--


     BibSonomy-Database - Database for BibSonomy.

     Copyright (C) 2006 - 2011 Knowledge & Data Engineering Group,
                               University of Kassel, Germany
                               http://www.kde.cs.uni-kassel.de/

     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU Lesser General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

-->

<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="Logging">

	<insert id="logBibTex" parameterClass="bibtexParam">
		INSERT INTO log_bibtex (title, entrytype, author, editor, year, content_id, journal, volume, chapter,
		                        edition, month, bookTitle, howpublished, institution, organization, publisher,
		                        address, school, series, bibtexKey, `group`, date, change_date, user_name, url, description,
		                        annote, note, pages, bKey, number, crossref, misc, bibtexAbstract, type, day,
		                        scraperid, privnote, simhash0, simhash1, simhash2, simhash3)
		SELECT title, entrytype, author, editor, year, content_id, journal, volume, chapter, edition, month,
		       bookTitle, howpublished, institution, organization, publisher, address, school, series, bibtexKey,
		       `group`, date, change_date, user_name, url, description, annote, note, pages, bKey, number, crossref, misc,
		       bibtexAbstract, type, day, scraperid, privnote, simhash0, simhash1, simhash2, simhash3
		FROM bibtex WHERE content_id = #requestedContentId#
	</insert>

	<update id="logBibTexUpdate" parameterClass="bibtexParam">
		UPDATE log_bibtex SET new_content_id = #newContentId# WHERE content_id = #requestedContentId#
	</update>
	
	<insert id="logGoldStandardPublication">
		INSERT INTO log_gold_standard_publications (content_id, <include refid ="allGoldStandardPublicationColumns"/>)
		SELECT content_id, <include refid ="allGoldStandardPublicationColumns"/>
		FROM gold_standard_publications WHERE simhash1 = #oldId#
	</insert>

	<update id="logGoldStandardPublicationUpdate">
		UPDATE log_gold_standard_publications SET new_simhash1 = #newId# WHERE simhash1 = #oldId# ORDER BY log_date DESC LIMIT 1
	</update>
	
	<insert id="logGoldStandardPublicationReferenceDelete">
		INSERT INTO log_gold_standard_publication_references (publication, reference, user_name) VALUES (#hash#, #refHash#, #username#)
	</insert>

	<insert id="logBookmark" parameterClass="bookmarkParam">
		INSERT INTO log_bookmark (content_id, book_url_hash, book_description, book_extended, `group`, date, change_date, user_name)
		SELECT content_id, book_url_hash, book_description, book_extended, `group`, date, change_date, user_name
		FROM bookmark WHERE content_id = #requestedContentId#
	</insert>

	<update id="logBookmarkUpdate" parameterClass="bookmarkParam">
		UPDATE log_bookmark SET new_content_id = #newContentId# WHERE content_id = #requestedContentId#
	</update>

	<insert id="logTagRelation" parameterClass="tagRelationParam">	
		INSERT INTO log_tagtagrelations (relationID, lower, upper, date_of_create, user_name) 
		SELECT relationID, lower, upper, date_of_create, user_name
		FROM tagtagrelations WHERE lower=#lowerTagName# AND upper=#upperTagName# AND user_name=#ownerUserName#
	</insert>

	<insert id="logConcept" parameterClass="tagRelationParam">	
		INSERT INTO log_tagtagrelations (relationID, lower, upper, date_of_create, user_name) 
		SELECT relationID, lower, upper, date_of_create, user_name
		FROM tagtagrelations WHERE upper=#upperTagName# AND user_name=#ownerUserName#
	</insert>

	<insert id="logTasDelete" parameterClass="tagParam">
		INSERT INTO log_tas (tas_id, tag_name, content_id, content_type, date, change_date)
		SELECT tas_id, tag_name, content_id, content_type, date,change_date
		FROM tas WHERE content_id = #requestedContentId#
	</insert>

	<insert id="logRemoveUserFromGroup" parameterClass="groupParam">
		INSERT INTO log_groups (`user_name`, `group`, `defaultgroup`, `start_date`)
		SELECT g.user_name, g.group, g.defaultgroup, g.start_date
		FROM groups g WHERE g.user_name = #userName# AND g.group = #groupId#
	</insert>
	
	<insert id="logBasketItemDelete" parameterClass="basketParam">
		INSERT INTO log_collector (user_name, content_id, add_date)
		SELECT c.user_name, c.content_id, c.date FROM collector c, bibtex b
		WHERE c.content_id = b.content_id
		AND b.simhash$simHash$ = #hash#
		AND b.user_name = #requestedUserName# AND c.user_name = #userName#
	</insert>
	
	<insert id="logDeleteAllFromBasket" parameterClass="String">
		INSERT INTO log_collector (user_name, content_id, add_date)
		SELECT c.user_name, c.content_id, c.date 
			FROM collector c
			WHERE c.user_name = #userName#;	
	</insert>

	<insert id="logUser" parameterClass="String">
		INSERT INTO log_user (	user_name,  user_email, user_password, user_homepage, user_realname, spammer,
								openurl, reg_date, ip_address, tmp_password, tmp_request_date, tagbox_style, 
								tagbox_sort, tagbox_minfreq, tagbox_max_count, is_max_count, tagbox_tooltip, list_itemcount, spammer_suggest,
								birthday, gender, profession, institution, interests, hobbies, place,  profilegroup, api_key, 
								updated_by, updated_at, lang, role, timestamp, to_classify, show_bookmark, show_bibtex, simple_interface)
		(SELECT user_name, user_email, user_password, user_homepage, user_realname, spammer,
				openurl, reg_date, ip_address, tmp_password, tmp_request_date, tagbox_style,
				tagbox_sort, tagbox_minfreq, tagbox_max_count, is_max_count, tagbox_tooltip, list_itemcount, spammer_suggest,
				birthday, gender, profession, institution, interests, hobbies, place, profilegroup, api_key, 
				updated_by, updated_at, lang, role, UNIX_TIMESTAMP(NOW()), to_classify, show_bookmark, show_bibtex, simple_interface
		 FROM user WHERE user_name = #userName#) 
	</insert>
	
	<insert id="logFollowerDelete" parameterClass="userParam">
		INSERT INTO log_followers (followers_id, user_name, f_user_name, fellowship_date) 
		(SELECT * FROM followers WHERE user_name = #userName# AND f_user_name = #requestedUserName#)
	</insert>
	
	<insert id="logFriendDelete" parameterClass="userParam">
		INSERT INTO log_friends (friends_id, user_name, f_user_name, tag_name, friendship_date) 
			SELECT friends_id, user_name, f_user_name, tag_name, friendship_date FROM friends 
			WHERE user_name = #userName# AND f_user_name = #requestedUserName# AND tag_name = #tag.name#
	</insert>
	
	<!-- spam framework logs -->
	
	<insert id="logPrediction" parameterClass="adminParam">
		INSERT INTO log_prediction (`user_name`, `prediction`, `timestamp`, `updated_at`, `algorithm` ,`mode`, `confidence`)
		VALUES (#userName#, #prediction#, UNIX_TIMESTAMP(NOW()), #updatedAt#, #algorithm#, #mode#, #confidence#)
	</insert>

	<insert id="logCurrentPrediction" parameterClass="adminParam">
		REPLACE INTO prediction (`user_name`, `prediction`, `timestamp`, `updated_at`, `algorithm` , `mode`, `evaluator`, `confidence`)
		VALUES (#userName#, #prediction#, UNIX_TIMESTAMP(NOW()), #updatedAt#, #algorithm#, #mode#, 0, #confidence#)
	</insert>
	
	<!-- discussion logs -->
	
	<insert id="logDiscussionItem" parameterClass="int">
		INSERT INTO log_discussion (<include refid ="discussionColumns"/>)
			SELECT <include refid ="commonDiscussionLogsAttributes"/>
				FROM discussion d
			WHERE d.discussion_id = #id#
	</insert>
</sqlMap>